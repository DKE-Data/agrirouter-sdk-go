//go:build go1.22

// Package test_server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package test_server

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AgrirouterOauthPRODScopes = "agrirouterOauthPROD.Scopes"
	AgrirouterOauthQAScopes   = "agrirouterOauthQA.Scopes"
)

// Defines values for EndpointCapabilityDirection.
const (
	RECEIVE     EndpointCapabilityDirection = "RECEIVE"
	SEND        EndpointCapabilityDirection = "SEND"
	SENDRECEIVE EndpointCapabilityDirection = "SEND_RECEIVE"
)

// Defines values for EndpointType.
const (
	CommunicationUnit        EndpointType = "communication_unit"
	FarmingSoftware          EndpointType = "farming_software"
	TelemetryPlatform        EndpointType = "telemetry_platform"
	VirtualCommunicationUnit EndpointType = "virtual_communication_unit"
)

// Endpoint defines model for Endpoint.
type Endpoint struct {
	ApplicationId     openapi_types.UUID   `json:"application_id"`
	Capabilities      []EndpointCapability `json:"capabilities"`
	EndpointType      EndpointType         `json:"endpoint_type"`
	ExternalId        string               `json:"external_id"`
	Id                openapi_types.UUID   `json:"id"`
	SoftwareVersionId openapi_types.UUID   `json:"software_version_id"`

	// TenantId The tenant ID of the endpoint
	TenantId string `json:"tenant_id"`
}

// EndpointCapability defines model for EndpointCapability.
type EndpointCapability struct {
	Direction *EndpointCapabilityDirection `json:"direction,omitempty"`

	// MessageType The message type that the endpoint can send or receive.
	// See available types here:
	// https://docs.agrirouter.com/agrirouter-interface-documentation/latest/tmt/overview.html
	MessageType *string `json:"messageType,omitempty"`
}

// EndpointCapabilityDirection defines model for EndpointCapability.Direction.
type EndpointCapabilityDirection string

// EndpointType defines model for EndpointType.
type EndpointType string

// PutEndpointRequest defines model for PutEndpointRequest.
type PutEndpointRequest struct {
	// ApplicationId The ID of the application that owns the endpoint
	ApplicationId openapi_types.UUID `json:"application_id"`

	// Capabilities The effective capabilities of the endpoint, must be subset of the capabilities of software version.
	Capabilities []EndpointCapability `json:"capabilities"`
	EndpointType EndpointType         `json:"endpoint_type"`

	// SoftwareVersionId The ID of the software version that owns the endpoint
	SoftwareVersionId openapi_types.UUID `json:"software_version_id"`
}

// AgrirouterTenantId defines model for agrirouter-tenant-id.
type AgrirouterTenantId = openapi_types.UUID

// PutEndpointParams defines parameters for PutEndpoint.
type PutEndpointParams struct {
	// AgrirouterTenantId The farmer's tenant ID in relation to which communication is done.
	AgrirouterTenantId AgrirouterTenantId `json:"agrirouter-tenant-id"`
}

// ReceiveMessagesParams defines parameters for ReceiveMessages.
type ReceiveMessagesParams struct {
	Accept *string `json:"Accept,omitempty"`
}

// SendMessageParams defines parameters for SendMessage.
type SendMessageParams struct {
	ApplicationMessageId string  `json:"applicationMessageId"`
	ChunkContextId       *string `json:"chunkContextId,omitempty"`
	ChunkIndex           *int    `json:"chunkIndex,omitempty"`
}

// PutEndpointJSONRequestBody defines body for PutEndpoint for application/json ContentType.
type PutEndpointJSONRequestBody = PutEndpointRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create or update endpoint
	// (PUT /endpoints/{externalId})
	PutEndpoint(w http.ResponseWriter, r *http.Request, externalId string, params PutEndpointParams)
	// Receive messages from Agrirouter outbox
	// (GET /messages)
	ReceiveMessages(w http.ResponseWriter, r *http.Request, params ReceiveMessagesParams)
	// Send a message to Agrirouter inbox
	// (POST /messages)
	SendMessage(w http.ResponseWriter, r *http.Request, params SendMessageParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PutEndpoint operation middleware
func (siw *ServerInterfaceWrapper) PutEndpoint(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "externalId" -------------
	var externalId string

	err = runtime.BindStyledParameterWithOptions("simple", "externalId", r.PathValue("externalId"), &externalId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "externalId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, AgrirouterOauthQAScopes, []string{"endpoints:manage"})

	ctx = context.WithValue(ctx, AgrirouterOauthPRODScopes, []string{"endpoints:manage"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PutEndpointParams

	headers := r.Header

	// ------------- Required header parameter "agrirouter-tenant-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("agrirouter-tenant-id")]; found {
		var AgrirouterTenantId AgrirouterTenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "agrirouter-tenant-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "agrirouter-tenant-id", valueList[0], &AgrirouterTenantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agrirouter-tenant-id", Err: err})
			return
		}

		params.AgrirouterTenantId = AgrirouterTenantId

	} else {
		err := fmt.Errorf("Header parameter agrirouter-tenant-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "agrirouter-tenant-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutEndpoint(w, r, externalId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReceiveMessages operation middleware
func (siw *ServerInterfaceWrapper) ReceiveMessages(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AgrirouterOauthQAScopes, []string{})

	ctx = context.WithValue(ctx, AgrirouterOauthPRODScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ReceiveMessagesParams

	headers := r.Header

	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Accept", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Accept", Err: err})
			return
		}

		params.Accept = &Accept

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReceiveMessages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SendMessage operation middleware
func (siw *ServerInterfaceWrapper) SendMessage(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AgrirouterOauthQAScopes, []string{})

	ctx = context.WithValue(ctx, AgrirouterOauthPRODScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SendMessageParams

	headers := r.Header

	// ------------- Required header parameter "applicationMessageId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("applicationMessageId")]; found {
		var ApplicationMessageId string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "applicationMessageId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "applicationMessageId", valueList[0], &ApplicationMessageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "applicationMessageId", Err: err})
			return
		}

		params.ApplicationMessageId = ApplicationMessageId

	} else {
		err := fmt.Errorf("Header parameter applicationMessageId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "applicationMessageId", Err: err})
		return
	}

	// ------------- Optional header parameter "chunkContextId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("chunkContextId")]; found {
		var ChunkContextId string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "chunkContextId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "chunkContextId", valueList[0], &ChunkContextId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chunkContextId", Err: err})
			return
		}

		params.ChunkContextId = &ChunkContextId

	}

	// ------------- Optional header parameter "chunkIndex" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("chunkIndex")]; found {
		var ChunkIndex int
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "chunkIndex", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "chunkIndex", valueList[0], &ChunkIndex, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chunkIndex", Err: err})
			return
		}

		params.ChunkIndex = &ChunkIndex

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendMessage(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("PUT "+options.BaseURL+"/endpoints/{externalId}", wrapper.PutEndpoint)
	m.HandleFunc("GET "+options.BaseURL+"/messages", wrapper.ReceiveMessages)
	m.HandleFunc("POST "+options.BaseURL+"/messages", wrapper.SendMessage)

	return m
}

type PutEndpointRequestObject struct {
	ExternalId string `json:"externalId"`
	Params     PutEndpointParams
	Body       *PutEndpointJSONRequestBody
}

type PutEndpointResponseObject interface {
	VisitPutEndpointResponse(w http.ResponseWriter) error
}

type PutEndpoint200JSONResponse Endpoint

func (response PutEndpoint200JSONResponse) VisitPutEndpointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutEndpoint201JSONResponse Endpoint

func (response PutEndpoint201JSONResponse) VisitPutEndpointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PutEndpoint400Response struct {
}

func (response PutEndpoint400Response) VisitPutEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutEndpoint401Response struct {
}

func (response PutEndpoint401Response) VisitPutEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PutEndpoint403Response struct {
}

func (response PutEndpoint403Response) VisitPutEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PutEndpoint500Response struct {
}

func (response PutEndpoint500Response) VisitPutEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PutEndpoint502Response struct {
}

func (response PutEndpoint502Response) VisitPutEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type PutEndpoint503Response struct {
}

func (response PutEndpoint503Response) VisitPutEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(503)
	return nil
}

type PutEndpoint504Response struct {
}

func (response PutEndpoint504Response) VisitPutEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(504)
	return nil
}

type ReceiveMessagesRequestObject struct {
	Params ReceiveMessagesParams
}

type ReceiveMessagesResponseObject interface {
	VisitReceiveMessagesResponse(w http.ResponseWriter) error
}

type ReceiveMessages200TexteventStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ReceiveMessages200TexteventStreamResponse) VisitReceiveMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ReceiveMessages400Response struct {
}

func (response ReceiveMessages400Response) VisitReceiveMessagesResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ReceiveMessages401Response struct {
}

func (response ReceiveMessages401Response) VisitReceiveMessagesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ReceiveMessages403Response struct {
}

func (response ReceiveMessages403Response) VisitReceiveMessagesResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type ReceiveMessages500Response struct {
}

func (response ReceiveMessages500Response) VisitReceiveMessagesResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type SendMessageRequestObject struct {
	Params SendMessageParams
	Body   io.Reader
}

type SendMessageResponseObject interface {
	VisitSendMessageResponse(w http.ResponseWriter) error
}

type SendMessage200Response struct {
}

func (response SendMessage200Response) VisitSendMessageResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SendMessage400Response struct {
}

func (response SendMessage400Response) VisitSendMessageResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SendMessage401Response struct {
}

func (response SendMessage401Response) VisitSendMessageResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SendMessage403Response struct {
}

func (response SendMessage403Response) VisitSendMessageResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type SendMessage500Response struct {
}

func (response SendMessage500Response) VisitSendMessageResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create or update endpoint
	// (PUT /endpoints/{externalId})
	PutEndpoint(ctx context.Context, request PutEndpointRequestObject) (PutEndpointResponseObject, error)
	// Receive messages from Agrirouter outbox
	// (GET /messages)
	ReceiveMessages(ctx context.Context, request ReceiveMessagesRequestObject) (ReceiveMessagesResponseObject, error)
	// Send a message to Agrirouter inbox
	// (POST /messages)
	SendMessage(ctx context.Context, request SendMessageRequestObject) (SendMessageResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PutEndpoint operation middleware
func (sh *strictHandler) PutEndpoint(w http.ResponseWriter, r *http.Request, externalId string, params PutEndpointParams) {
	var request PutEndpointRequestObject

	request.ExternalId = externalId
	request.Params = params

	var body PutEndpointJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutEndpoint(ctx, request.(PutEndpointRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutEndpoint")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutEndpointResponseObject); ok {
		if err := validResponse.VisitPutEndpointResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReceiveMessages operation middleware
func (sh *strictHandler) ReceiveMessages(w http.ResponseWriter, r *http.Request, params ReceiveMessagesParams) {
	var request ReceiveMessagesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReceiveMessages(ctx, request.(ReceiveMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReceiveMessages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReceiveMessagesResponseObject); ok {
		if err := validResponse.VisitReceiveMessagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendMessage operation middleware
func (sh *strictHandler) SendMessage(w http.ResponseWriter, r *http.Request, params SendMessageParams) {
	var request SendMessageRequestObject

	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SendMessage(ctx, request.(SendMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendMessage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SendMessageResponseObject); ok {
		if err := validResponse.VisitSendMessageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
