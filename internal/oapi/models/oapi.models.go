// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package models

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AgrirouterOauthPRODScopes = "agrirouterOauthPROD.Scopes"
	AgrirouterOauthQAScopes   = "agrirouterOauthQA.Scopes"
)

// Defines values for EndpointCapabilityDirection.
const (
	RECEIVE     EndpointCapabilityDirection = "RECEIVE"
	SEND        EndpointCapabilityDirection = "SEND"
	SENDRECEIVE EndpointCapabilityDirection = "SEND_RECEIVE"
)

// Defines values for EndpointType.
const (
	CommunicationUnit        EndpointType = "communication_unit"
	FarmingSoftware          EndpointType = "farming_software"
	TelemetryPlatform        EndpointType = "telemetry_platform"
	VirtualCommunicationUnit EndpointType = "virtual_communication_unit"
)

// Defines values for ReceiveEventsParamsTypes.
const (
	FILERECEIVED    ReceiveEventsParamsTypes = "FILE_RECEIVED"
	MESSAGERECEIVED ReceiveEventsParamsTypes = "MESSAGE_RECEIVED"
)

// Endpoint defines model for Endpoint.
type Endpoint struct {
	ApplicationId     openapi_types.UUID   `json:"application_id"`
	Capabilities      []EndpointCapability `json:"capabilities"`
	EndpointType      EndpointType         `json:"endpoint_type"`
	ExternalId        string               `json:"external_id"`
	Id                openapi_types.UUID   `json:"id"`
	SoftwareVersionId openapi_types.UUID   `json:"software_version_id"`

	// TenantId The tenant ID of the endpoint
	TenantId string `json:"tenant_id"`
}

// EndpointCapability defines model for EndpointCapability.
type EndpointCapability struct {
	Direction EndpointCapabilityDirection `json:"direction"`

	// MessageType The message type that the endpoint can send or receive.
	// See available types here:
	// https://docs.agrirouter.com/agrirouter-interface-documentation/latest/tmt/overview.html
	MessageType string `json:"message_type"`
}

// EndpointCapabilityDirection defines model for EndpointCapability.Direction.
type EndpointCapabilityDirection string

// EndpointSubscription defines model for EndpointSubscription.
type EndpointSubscription struct {
	// MessageType The message type that the endpoint is subscribed to.
	// See available types here:
	// https://docs.agrirouter.com/agrirouter-interface-documentation/latest/tmt/overview.html
	MessageType string `json:"message_type"`
}

// EndpointType defines model for EndpointType.
type EndpointType string

// FileReceivedEventData Data structure for FILE_RECEIVED events. This event shall arrive whenever a big file transfer
// has completed in its entirety, i.e when big payload was sent as several message chunks, this
// event would be sent last when the complete payload is received.
type FileReceivedEventData struct {
	EventType string `json:"event_type"`

	// Payload The payload of the file, base64 encoded. Only one of `payload` or `payload_uri` would be present.
	Payload *[]byte `json:"payload,omitempty"`

	// PayloadUri The URI to access the payload. May have hostname that is different from
	// the API server, as payloads may be served from a different server or CDN.
	// Clients MUST use provided URI as is without any modifications.
	// If event embeds payload directly, this field would be absent.
	PayloadUri *PayloadURI `json:"payload_uri,omitempty"`
}

// GenericEventData defines model for GenericEventData.
type GenericEventData struct {
	union json.RawMessage
}

// MessageReceivedEventData Data structure for MESSAGE_RECEIVED events. This event would arrive whenever application
// got a message routed to one of its endpoints.
type MessageReceivedEventData struct {
	// AppMessageId The application message ID of the received message, generated based on application input.
	AppMessageId string `json:"app_message_id"`
	EventType    string `json:"event_type"`

	// Id The agrirouter message ID of the received message, generated by agrirouter.
	Id openapi_types.UUID `json:"id"`

	// MessageType The message type of the received message.
	// See available types here:
	// https://docs.agrirouter.com/agrirouter-interface-documentation/latest/tmt/overview.html
	MessageType string `json:"message_type"`

	// Payload The payload of the message, base64 encoded. Only one of `payload` or `payload_uri` would be present.
	Payload *[]byte `json:"payload,omitempty"`

	// PayloadUri The URI to access the payload. May have hostname that is different from
	// the API server, as payloads may be served from a different server or CDN.
	// Clients MUST use provided URI as is without any modifications.
	// If event embeds payload directly, this field would be absent.
	PayloadUri *PayloadURI `json:"payload_uri,omitempty"`

	// ReceivedAt The timestamp when the message was received by agrirouter.
	ReceivedAt *time.Time `json:"received_at,omitempty"`

	// ReceivingEndpointId Internally-generated agrirouter ID of the receiving endpoint.
	ReceivingEndpointId openapi_types.UUID `json:"receiving_endpoint_id"`

	// SentAt The timestamp when the message was sent by sending application.
	SentAt time.Time `json:"sent_at"`
}

// PayloadURI The URI to access the payload. May have hostname that is different from
// the API server, as payloads may be served from a different server or CDN.
// Clients MUST use provided URI as is without any modifications.
// If event embeds payload directly, this field would be absent.
type PayloadURI = string

// PutEndpointRequest defines model for PutEndpointRequest.
type PutEndpointRequest struct {
	// ApplicationId The ID of the application that owns the endpoint
	ApplicationId openapi_types.UUID `json:"application_id"`

	// Capabilities The effective capabilities of the endpoint, must be subset of the capabilities of software version.
	Capabilities []EndpointCapability `json:"capabilities"`
	EndpointType EndpointType         `json:"endpoint_type"`

	// SoftwareVersionId The ID of the software version that owns the endpoint
	SoftwareVersionId openapi_types.UUID     `json:"software_version_id"`
	Subscriptions     []EndpointSubscription `json:"subscriptions"`
}

// XAgrirouterTenantId defines model for x-agrirouter-tenant-id.
type XAgrirouterTenantId = openapi_types.UUID

// PutEndpointParams defines parameters for PutEndpoint.
type PutEndpointParams struct {
	// XAgrirouterTenantId The farmer's tenant ID in relation to which communication is done.
	XAgrirouterTenantId XAgrirouterTenantId `json:"x-agrirouter-tenant-id"`
}

// ReceiveEventsParams defines parameters for ReceiveEvents.
type ReceiveEventsParams struct {
	// Types Events type filter, if provided would limit the events returned to only those of the specified types.
	// If not provided, all supported events will be streamed.
	Types *[]ReceiveEventsParamsTypes `form:"types,omitempty" json:"types,omitempty"`
}

// ReceiveEventsParamsTypes defines parameters for ReceiveEvents.
type ReceiveEventsParamsTypes string

// SendMessagesParams defines parameters for SendMessages.
type SendMessagesParams struct {
	// ContentLength The size of the complete payload in bytes.
	// This is used to determine if the payload needs to be
	// split into chunks and how.
	ContentLength int64 `json:"content-length"`

	// XAgrirouterIsPublish If set to true, the message will be sent as a published message
	// and any endpoints that are subscribed to the message type
	// would be able to receive it, provided other conditions for routing are met.
	XAgrirouterIsPublish bool `json:"x-agrirouter-is-publish"`

	// XAgrirouterDirectRecipients Comma-separated list of agrirouter endpoint IDs of the direct recipients.
	// Allows specifying direct recipients of the message, which
	// could receive it even if they are not subscribed to the message type.
	XAgrirouterDirectRecipients *[]openapi_types.UUID `json:"x-agrirouter-direct-recipients,omitempty"`

	// XAgrirouterSentTimestamp Client side timestamp of sending the data.
	XAgrirouterSentTimestamp time.Time `json:"x-agrirouter-sent-timestamp"`

	// XAgrirouterEndpointId The agrirouter endpoint ID of the sender.
	// This is the ID of the endpoint that is sending the message.
	XAgrirouterEndpointId openapi_types.UUID `json:"x-agrirouter-endpoint-id"`

	// XAgrirouterTeamsetContextId A teamset is a set of connected machines that work and move together
	// and are connected to the same (virtual) communication unit.
	// The machines in the teamset are typically connected physically and
	// informationally (for example via ISOBUS).
	XAgrirouterTeamsetContextId *string `json:"x-agrirouter-teamset-context-id,omitempty"`

	// XAgrirouterMessageType Message type of the sent data. See available types here:
	// https://docs.agrirouter.com/agrirouter-interface-documentation/latest/tmt/overview.html
	XAgrirouterMessageType string `json:"x-agrirouter-message-type"`

	// XAgrirouterTenantId The farmer's tenant ID in relation to which communication is done.
	XAgrirouterTenantId XAgrirouterTenantId `json:"x-agrirouter-tenant-id"`

	// XAgrirouterContextId Application side identifier of the sent data.
	// agrirouter will use this to generate application message id
	// and also will pass it on as chunk context id in case if the payload
	// had to be split into several messages.
	// This has to be generated by the application and be unique for
	// every sent payload. Applications may want to reuse the same id
	// in case if they are resending the same payload again, when f.e
	// retrying after a failure.
	XAgrirouterContextId string `json:"x-agrirouter-context-id"`

	// XAgrirouterFilename Optional name of the file that is attached to messages as metadata.
	XAgrirouterFilename *string `json:"x-agrirouter-filename,omitempty"`
}

// PutEndpointJSONRequestBody defines body for PutEndpoint for application/json ContentType.
type PutEndpointJSONRequestBody = PutEndpointRequest

// AsMessageReceivedEventData returns the union data inside the GenericEventData as a MessageReceivedEventData
func (t GenericEventData) AsMessageReceivedEventData() (MessageReceivedEventData, error) {
	var body MessageReceivedEventData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageReceivedEventData overwrites any union data inside the GenericEventData as the provided MessageReceivedEventData
func (t *GenericEventData) FromMessageReceivedEventData(v MessageReceivedEventData) error {
	v.EventType = "MessageReceivedEventData"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageReceivedEventData performs a merge with any union data inside the GenericEventData, using the provided MessageReceivedEventData
func (t *GenericEventData) MergeMessageReceivedEventData(v MessageReceivedEventData) error {
	v.EventType = "MessageReceivedEventData"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFileReceivedEventData returns the union data inside the GenericEventData as a FileReceivedEventData
func (t GenericEventData) AsFileReceivedEventData() (FileReceivedEventData, error) {
	var body FileReceivedEventData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileReceivedEventData overwrites any union data inside the GenericEventData as the provided FileReceivedEventData
func (t *GenericEventData) FromFileReceivedEventData(v FileReceivedEventData) error {
	v.EventType = "FileReceivedEventData"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileReceivedEventData performs a merge with any union data inside the GenericEventData, using the provided FileReceivedEventData
func (t *GenericEventData) MergeFileReceivedEventData(v FileReceivedEventData) error {
	v.EventType = "FileReceivedEventData"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GenericEventData) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"event_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GenericEventData) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FileReceivedEventData":
		return t.AsFileReceivedEventData()
	case "MessageReceivedEventData":
		return t.AsMessageReceivedEventData()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GenericEventData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GenericEventData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
