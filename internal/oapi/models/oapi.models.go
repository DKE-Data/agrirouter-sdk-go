// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package models

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AgrirouterOauthPRODScopes = "agrirouterOauthPROD.Scopes"
	AgrirouterOauthQAScopes   = "agrirouterOauthQA.Scopes"
)

// Defines values for EndpointCapabilityDirection.
const (
	RECEIVE     EndpointCapabilityDirection = "RECEIVE"
	SEND        EndpointCapabilityDirection = "SEND"
	SENDRECEIVE EndpointCapabilityDirection = "SEND_RECEIVE"
)

// Defines values for EndpointType.
const (
	CommunicationUnit        EndpointType = "communication_unit"
	FarmingSoftware          EndpointType = "farming_software"
	TelemetryPlatform        EndpointType = "telemetry_platform"
	VirtualCommunicationUnit EndpointType = "virtual_communication_unit"
)

// Endpoint defines model for Endpoint.
type Endpoint struct {
	ApplicationId     openapi_types.UUID   `json:"application_id"`
	Capabilities      []EndpointCapability `json:"capabilities"`
	EndpointType      EndpointType         `json:"endpoint_type"`
	ExternalId        string               `json:"external_id"`
	Id                openapi_types.UUID   `json:"id"`
	SoftwareVersionId openapi_types.UUID   `json:"software_version_id"`

	// TenantId The tenant ID of the endpoint
	TenantId string `json:"tenant_id"`
}

// EndpointCapability defines model for EndpointCapability.
type EndpointCapability struct {
	Direction EndpointCapabilityDirection `json:"direction"`

	// MessageType The message type that the endpoint can send or receive.
	// See available types here:
	// https://docs.agrirouter.com/agrirouter-interface-documentation/latest/tmt/overview.html
	MessageType string `json:"message_type"`
}

// EndpointCapabilityDirection defines model for EndpointCapability.Direction.
type EndpointCapabilityDirection string

// EndpointSubscription defines model for EndpointSubscription.
type EndpointSubscription struct {
	// MessageType The message type that the endpoint is subscribed to.
	// See available types here:
	// https://docs.agrirouter.com/agrirouter-interface-documentation/latest/tmt/overview.html
	MessageType string `json:"message_type"`
}

// EndpointType defines model for EndpointType.
type EndpointType string

// PutEndpointRequest defines model for PutEndpointRequest.
type PutEndpointRequest struct {
	// ApplicationId The ID of the application that owns the endpoint
	ApplicationId openapi_types.UUID `json:"application_id"`

	// Capabilities The effective capabilities of the endpoint, must be subset of the capabilities of software version.
	Capabilities []EndpointCapability `json:"capabilities"`
	EndpointType EndpointType         `json:"endpoint_type"`

	// SoftwareVersionId The ID of the software version that owns the endpoint
	SoftwareVersionId openapi_types.UUID     `json:"software_version_id"`
	Subscriptions     []EndpointSubscription `json:"subscriptions"`
}

// XAgrirouterTenantId defines model for x-agrirouter-tenant-id.
type XAgrirouterTenantId = openapi_types.UUID

// PutEndpointParams defines parameters for PutEndpoint.
type PutEndpointParams struct {
	// XAgrirouterTenantId The farmer's tenant ID in relation to which communication is done.
	XAgrirouterTenantId XAgrirouterTenantId `json:"x-agrirouter-tenant-id"`
}

// SendMessagesParams defines parameters for SendMessages.
type SendMessagesParams struct {
	// ContentLength The size of the complete payload in bytes.
	// This is used to determine if the payload needs to be
	// split into chunks and how.
	ContentLength int64 `json:"content-length"`

	// XAgrirouterIsPublish If set to true, the message will be sent as a published message
	// and any endpoints that are subscribed to the message type
	// would be able to receive it, provided other conditions for routing are met.
	XAgrirouterIsPublish bool `json:"x-agrirouter-is-publish"`

	// XAgrirouterDirectRecipients Comma-separated list of agrirouter endpoint IDs of the direct recipients.
	// Allows specifying direct recipients of the message, which
	// could receive it even if they are not subscribed to the message type.
	XAgrirouterDirectRecipients *[]openapi_types.UUID `json:"x-agrirouter-direct-recipients,omitempty"`

	// XAgrirouterSentTimestamp Client side timestamp of sending the data.
	XAgrirouterSentTimestamp time.Time `json:"x-agrirouter-sent-timestamp"`

	// XAgrirouterEndpointId The agrirouter endpoint ID of the sender.
	// This is the ID of the endpoint that is sending the message.
	XAgrirouterEndpointId openapi_types.UUID `json:"x-agrirouter-endpoint-id"`

	// XAgrirouterTeamsetContextId A teamset is a set of connected machines that work and move together
	// and are connected to the same (virtual) communication unit.
	// The machines in the teamset are typically connected physically and
	// informationally (for example via ISOBUS).
	XAgrirouterTeamsetContextId *string `json:"x-agrirouter-teamset-context-id,omitempty"`

	// XAgrirouterMessageType Message type of the sent data. See available types here:
	// https://docs.agrirouter.com/agrirouter-interface-documentation/latest/tmt/overview.html
	XAgrirouterMessageType string `json:"x-agrirouter-message-type"`

	// XAgrirouterTenantId The farmer's tenant ID in relation to which communication is done.
	XAgrirouterTenantId XAgrirouterTenantId `json:"x-agrirouter-tenant-id"`

	// XAgrirouterContextId Application side identifier of the sent data.
	// agrirouter will use this to generate application message id
	// and also will pass it on as chunk context id in case if the payload
	// had to be split into several messages.
	XAgrirouterContextId string `json:"x-agrirouter-context-id"`

	// XAgrirouterFilename Optional name of the file that is attached to messages as metadata.
	XAgrirouterFilename *string `json:"x-agrirouter-filename,omitempty"`
}

// PutEndpointJSONRequestBody defines body for PutEndpoint for application/json ContentType.
type PutEndpointJSONRequestBody = PutEndpointRequest
