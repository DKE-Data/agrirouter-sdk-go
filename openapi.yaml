openapi: "3.1.0"

info:
  contact:
    email: info@dke-data.com
    name: DKE Data
    url: https://dke-data.com
  title: agrirouter Edition 2025 API
  version: "1.0"
  description: |
    This service provides access to endpoint data of agrirouter via HTTP.
servers:
  - url: http://localhost:{port}
    variables:
      port:
        default: "8081"
  - url: https://api.qa.agrirouter.farm
    description: QA Server
  - url: https://api.agrirouter.com
    description: Production Server

paths:
  /messages:
    post:
      operationId: sendMessages
      summary: Send one or several messages to agrirouter inbox
      description: |
        Send one or several messages via agrirouter to other endpoints.
        The payload is sent as a binary stream in the request body.
        If the payload is too large, it would be split into several messages
        by agrirouter itself, client does not need to care about doing that.
        Depending on size of the payload, result could be a single message
        or several messages in the target endpoint outboxes.
      parameters:
        - name: content-length
          in: header
          required: true
          schema:
            type: integer
            format: int64
          description: |
            The size of the complete payload in bytes.
            This is used to determine if the payload needs to be 
            split into chunks and how.
        - name: x-agrirouter-is-publish
          in: header
          required: true
          schema:
            type: boolean
          description: |
            If set to true, the message will be sent as a published message
            and any endpoints that are subscribed to the message type
            would be able to receive it, provided other conditions for routing are met.
        - name: x-agrirouter-direct-recipients
          in: header
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
          description: |
            Comma-separated list of agrirouter endpoint IDs of the direct recipients.
            Allows specifying direct recipients of the message, which
            could receive it even if they are not subscribed to the message type.
        - name: x-agrirouter-sent-timestamp
          in: header
          required: true
          schema:
            type: string
            format: date-time
          description: |
            Client side timestamp of sending the data.
        - name: x-agrirouter-endpoint-id
          in: header
          required: true
          schema:
            type: string
            format: uuid
          description: |
            The agrirouter endpoint ID of the sender.
            This is the ID of the endpoint that is sending the message.
        - name: x-agrirouter-teamset-context-id
          in: header
          required: false
          schema:
            type: string
            maxLength: 100
          description: |
            A teamset is a set of connected machines that work and move together 
            and are connected to the same (virtual) communication unit. 
            The machines in the teamset are typically connected physically and 
            informationally (for example via ISOBUS).
        - name: x-agrirouter-message-type
          in: header
          required: true
          schema:
            type: string
            maxLength: 100
          description: |
            Message type of the sent data. See available types here:
            https://docs.agrirouter.com/agrirouter-interface-documentation/latest/tmt/overview.html
          examples:
            iso11783DeviceDescriptionProtobuf:
              summary: Device Description
              value: "iso:11783:-10:device_description:protobuf"
            iso11783TaskDataZip:
              summary: ISO11783 Task Data Zip
              value: "iso:11783:-10:taskdata:zip"
        - $ref: "#/components/parameters/x-agrirouter-tenant-id"
        - name: x-agrirouter-context-id
          in: header
          required: true
          schema:
            type: string
            maxLength: 50
          description: |
            Application side identifier of the sent data.
            agrirouter will use this to generate application message id
            and also will pass it on as chunk context id in case if the payload
            had to be split into several messages.
            This has to be generated by the application and be unique for
            every sent payload. Applications may want to reuse the same id
            in case if they are resending the same payload again, when f.e
            retrying after a failure.
        - name: x-agrirouter-filename
          in: header
          required: false
          schema:
            type: string
            maxLength: 100
          description: |
            Optional name of the file that is attached to messages as metadata.
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Message successfully sent to inbox
        '400':
          description: Request is invalid
        '401':
          description: Authentication failed
        '403':
          description: Authorization failed
        '500':
          description: Server Side Error
  /payloads/{messageId}/{messageReceivedAt}:
    get:
      operationId: getMessagePayload
      summary: Download message payload from agrirouter
      description: |
        Download message payload from agrirouter by message ID.
        The payload is returned as a binary stream in the response body.
        Typically clients are expected to receive URL pointed to this
        resource in the `payload_uri` field of the event data when
        receiving MESSAGE_RECEIVED or FILE_RECEIVED events.
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The agrirouter message ID of the payload to download.
        - name: messageReceivedAt
          in: path
          required: true
          schema:
            type: string
            format: date-time
          description: The timestamp when the message was received by agrirouter.
      responses:
        '200':
          description: Message payload successfully retrieved
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Request is invalid
        '401':
          description: Authentication failed
        '403':
          description: Authorization failed
        '404':
          description: Payload not found
        '500':
          description: Server Side Error
  /events:
    get:
      operationId: receiveEvents
      summary: Receive events from agrirouter outbox
      parameters:
        - name: types
          in: query
          required: false
          description: |
            Events type filter, if provided would limit the events returned to only those of the specified types.
            If not provided, all supported events will be streamed.
          example: ["MESSAGE_RECEIVED", "FILE_RECEIVED"]
          schema:
            type: array
            items:
              type: string
              enum:
                - MESSAGE_RECEIVED
                - FILE_RECEIVED
      description: |
        Receive stream of events from the agrirouter outbox.
        The events are retrieved for every endpoint of an
        authorized application.

        These are possible event types:
        - MESSAGE_RECEIVED - when one message is received
        - FILE_RECEIVED - when chunked payload has been completely received

        These events are sent as Server-Sent Events (SSE), where one line
        prefixed "event:" would define event type and another line
        prefixed "data:" would contain the actual event data.

        See Server-Sent Events specification here:
        https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events

        For example:
        
        ```
        event: MESSAGE_RECEIVED
        data: {"messageId":"12345","timestamp":"2023-01-01T12:00:00Z"}
        ```

        In this API, `data` would always be JSON encoded object, every
        event data schema is defined in the `#/components/schemas`, with
        schema name always ending with `EventData`. 

        Here is a table:

        | Event Type          | Schema                                                                    |
        |---------------------|---------------------------------------------------------------------------|
        | MESSAGE_RECEIVED    | [MessageReceivedEventData](#/components/schemas/MessageReceivedEventData) |
        | FILE_RECEIVED       | [FileReceivedEventData](#/components/schemas/FileReceivedEventData)       |

      # As there is no yet accepted way of defining schema for SSE data,
      # it would have to be only described in description for now.
      responses:
        '200':
          description: Stream of events from agrirouter
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/GenericEventData"
        '400':
          description: Request is invalid
        '401':
          description: Authentication failed
        '403':
          description: Authorization failed
        '500':
          description: Server Side Error

  /endpoints/{externalId}:
    put:
      operationId: putEndpoint
      summary: Create or update endpoint
      description: This resource could be used to create new endpoint or reconfigure existing one.
      security:
        - agrirouterOauthQA: ["endpoints:manage"]
        - agrirouterOauthPROD: ["endpoints:manage"]
      parameters:
        - $ref: "#/components/parameters/x-agrirouter-tenant-id"
        - name: externalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutEndpointRequest"
      responses:
        '200':
          description: Endpoint was successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Endpoint"
        '201':
          description: Endpoint was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Endpoint"
        '400':
          description: Request is invalid
        '401':
          description: Authentication failed
        '403':
          description: Authorization failed
        '502':
          description: Bad Gateway, upstream service has returned an error
        '503':
          description: Service Unavailable at the moment
        '504':
          description: Gateway Timeout, request took too long to process
        '500':
          description: Server Side Error

security:
  - agrirouterOauthQA: []
  - agrirouterOauthPROD: []

components:
  securitySchemes:
    agrirouterOauthQA:
      type: oauth2
      description: Agrirouter OAuth2 authentication for QA environment.
      flows:
        clientCredentials:
          tokenUrl: https://oauth.qa.agrirouter.farm/token
          scopes: {}
        authorizationCode:
          authorizationUrl: https://oauth.qa.agrirouter.farm/authorize
          tokenUrl: https://oauth.qa.agrirouter.farm/token
          scopes:
            endpoints:manage: Manage endpoints in the Agrirouter tenant.
    agrirouterOauthPROD:
      type: oauth2
      description: Agrirouter OAuth2 authentication for PROD environment.
      flows:
        clientCredentials:
          tokenUrl: https://oauth.prod.agrirouter.farm/token
          scopes: {}
        authorizationCode:
          authorizationUrl: https://oauth.prod.agrirouter.farm/authorize
          tokenUrl: https://oauth.prod.agrirouter.farm/token
          scopes:
            endpoints:manage: Manage endpoints in the Agrirouter tenant.
  parameters:
    x-agrirouter-tenant-id:
      name: x-agrirouter-tenant-id
      in: header
      required: true
      schema:
        type: string
        format: uuid
      description: The farmer's tenant ID in relation to which communication is done.
  schemas:
    GenericEventData:
      oneOf:
        - $ref: "#/components/schemas/MessageReceivedEventData"
        - $ref: "#/components/schemas/FileReceivedEventData"
      discriminator:
        propertyName: event_type
    PayloadURI:
      type: string
      format: uri
      description: |
        The URI to access the payload. May have hostname that is different from
        the API server, as payloads may be served from a different server or CDN.
        Clients MUST use provided URI as is without any modifications.
        If event embeds payload directly, this field would be absent.
    MessageReceivedEventData:
      type: object
      description: |
        Data structure for MESSAGE_RECEIVED events. This event would arrive whenever application
        got a message routed to one of its endpoints.
      required:
        - id
        - message_type
        - app_message_id
        - sent_at
        - event_type
        - receiving_endpoint_id
      properties:
        id:
          type: string
          format: uuid
          description: The agrirouter message ID of the received message, generated by agrirouter.
        app_message_id:
          type: string
          description: The application message ID of the received message, generated based on application input.
        message_type:
          type: string
          example: "iso:11783:-10:taskdata:zip"
          description: |
            The message type of the received message.
            See available types here:
            https://docs.agrirouter.com/agrirouter-interface-documentation/latest/tmt/overview.html
        sent_at:
          type: string
          format: date-time
          description: The timestamp when the message was sent by sending application.
        received_at:
          type: string
          format: date-time
          description: The timestamp when the message was received by agrirouter.
        payload:
          type: string
          format: byte
          description: The payload of the message, base64 encoded. Only one of `payload` or `payload_uri` would be present.
        payload_uri:
          $ref: "#/components/schemas/PayloadURI"
        event_type:
          type: string
          const: MESSAGE_RECEIVED
        receiving_endpoint_id:
          type: string
          format: uuid
          description: Internally-generated agrirouter ID of the receiving endpoint.
    FileReceivedEventData:
      type: object
      description: |
        Data structure for FILE_RECEIVED events. This event shall arrive whenever a big file transfer
        has completed in its entirety, i.e when big payload was sent as several message chunks, this
        event would be sent last when the complete payload is received.
      required:
        - event_type
      properties:
        payload_uri:
          $ref: "#/components/schemas/PayloadURI"
        payload:
          type: string
          format: byte
          description: The payload of the file, base64 encoded. Only one of `payload` or `payload_uri` would be present.
        event_type:
          type: string
          const: FILE_RECEIVED
    PutEndpointRequest:
      type: object
      required:
        - application_id
        - software_version_id
        - capabilities
        - subscriptions
        - endpoint_type
      properties:
        application_id:
          type: string
          format: uuid
          description: The ID of the application that owns the endpoint
        software_version_id:
          type: string
          format: uuid
          description: The ID of the software version that owns the endpoint
        capabilities:
          type: array
          items:
            $ref: "#/components/schemas/EndpointCapability"
          description: The effective capabilities of the endpoint, must be subset of the capabilities of software version.
        subscriptions:
          type: array
          items:
            $ref: "#/components/schemas/EndpointSubscription"
        endpoint_type:
          $ref: "#/components/schemas/EndpointType"
    Endpoint:
      type: object
      required:
        - id
        - external_id
        - endpoint_type
        - tenant_id
        - application_id
        - software_version_id
        - capabilities
      properties:
        id:
          type: string
          format: uuid
        external_id:
          type: string
        application_id:
          type: string
          format: uuid
        software_version_id:
          type: string
          format: uuid
        endpoint_type:
          $ref: "#/components/schemas/EndpointType"
        tenant_id:
          type: string
          description: The tenant ID of the endpoint
        capabilities:
          type: array
          items:
            $ref: "#/components/schemas/EndpointCapability"
    EndpointSubscription:
      type: object
      required:
        - message_type
      properties:
        message_type:
          type: string
          example: "iso:11783:-10:taskdata:zip"
          description: |
            The message type that the endpoint is subscribed to.
            See available types here:
            https://docs.agrirouter.com/agrirouter-interface-documentation/latest/tmt/overview.html
    EndpointCapability:
      type: object
      required:
        - message_type
        - direction
      properties:
        message_type:
          type: string
          example: "iso:11783:-10:taskdata:zip"
          description: |
            The message type that the endpoint can send or receive.
            See available types here:
            https://docs.agrirouter.com/agrirouter-interface-documentation/latest/tmt/overview.html
        direction:
          type: string
          enum:
            - "SEND"
            - "RECEIVE"
            - "SEND_RECEIVE"
    EndpointType:
      type: string
      enum:
        - farming_software
        - telemetry_platform
        - communication_unit
        - virtual_communication_unit
